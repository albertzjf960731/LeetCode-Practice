/*
 * @lc app=leetcode id=924 lang=cpp
 *
 * [924] Minimize Malware Spread
 *
 * https://leetcode.com/problems/minimize-malware-spread/description/
 *
 * algorithms
 * Hard (41.97%)
 * Likes:    303
 * Dislikes: 258
 * Total Accepted:    24.6K
 * Total Submissions: 58.7K
 * Testcase Example:  '[[1,1,0],[1,1,0],[0,0,1]]\n[0,1]'
 *
 * In a network of nodes, each node i is directly connected to another node j
 * if and only if graph[i][j] = 1.
 * 
 * Some nodes initial are initially infected by malware.  Whenever two nodes
 * are directly connected and at least one of those two nodes is infected by
 * malware, both nodes will be infected by malware.  This spread of malware
 * will continue until no more nodes can be infected in this manner.
 * 
 * Suppose M(initial) is the final number of nodes infected with malware in the
 * entire network, after the spread of malware stops.
 * 
 * We will remove one node from the initial list.  Return the node that if
 * removed, would minimize M(initial).  If multiple nodes could be removed to
 * minimize M(initial), return such a node with the smallest index.
 * 
 * Note that if a node was removed from the initial list of infected nodes, it
 * may still be infected later as a result of the malware spread.
 * 
 * 
 * 
 * 
 * 
 * 
 * Example 1:
 * 
 * 
 * Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
 * Output: 0
 * 
 * 
 * Example 2:
 * 
 * 
 * Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
 * Output: 0
 * 
 * 
 * Example 3:
 * 
 * 
 * Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
 * Output: 1
 * 
 * 
 * 
 * 
 * Note:
 * 
 * 
 * 1 < graph.length = graph[0].length <= 300
 * 0 <= graph[i][j] == graph[j][i] <= 1
 * graph[i][i] == 1
 * 1 <= initial.length <= graph.length
 * 0 <= initial[i] < graph.length
 * 
 * 
 */
#include<vector>
#include<unordered_set>
#include<queue>
using namespace std;

// @lc code=start
class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        // int mn = INT_MAX, res = 0;
        // unordered_set<int> infected(initial.begin(), initial.end());
        
        // for (int num : initial) {
        //     infected.erase(num);
        //     int cnt = BFS(graph, infected);
        //     if (cnt < mn || (cnt == mn && num < res)) {
        //         mn = cnt;
        //         res = num;
        //     }
        //     infected.insert(num);
        // }
        // return res;
        
        
        // int mn = INT_MAX, res = 0;
        // unordered_set<int> infected(initial.begin(), initial.end());
        // for (int num : initial) {
        //     infected.erase(num);
            
        //     int cnt = 0;
        //     unordered_set<int> visited;
        //     for (int cur : infected) {
        //         DFS(graph, cur, visited, cnt);
        //     }
            
        //     if (cnt < mn || (cnt == mn && num < res)) {
        //         mn = cnt;
        //         res = num;
        //     }
        //     infected.insert(num);
        // }
        // return res;


        int n = graph.size();
        
        vector<int> root(n, -1), area(n), malware(n), res{1, 0};
        for (int i=0; i<n; ++i) root[i] = i;
        for (int i=0; i<n; ++i) {
            for (int j=i+1; j<n; ++j) {
                if (graph[i][j] == 1) 
                    root[findRoot(root, i)] = findRoot(root, j);
            }
        }
        
        for (int i=0; i<n; ++i) ++area[findRoot(root, i)];
        for (int i : initial) ++malware[findRoot(root, i)];
        
        for (int i: initial) {
            res = min(res, 
                {(malware[findRoot(root, i)]==1) * (-area[findRoot(root, i)]), i});
        }
        return res[1];
    }
    
    int findRoot(vector<int>& root, int i) {
        while (i != root[i]) i = root[i];
        return i;
    }

    void DFS(vector<vector<int>>& graph, int cur, unordered_set<int>& visited, int& cnt) {
        if (visited.count(cur)) return;
        visited.insert(cur);
        ++cnt;
        for (int i = 0; i < graph[cur].size(); ++i) {
            if (graph[cur][i] != 1) continue;
            DFS(graph, i, visited, cnt);
        }
    }

    int BFS(vector<vector<int>>& graph, unordered_set<int> infected) {
        queue<int> q;
        for (int num : infected) q.push(num);
        while (!q.empty()) {
            auto t = q.front(); q.pop();
            for (int i = 0; i < graph[t].size(); ++i) {
                if (graph[t][i] != 1 || infected.count(i)) continue;
                infected.insert(i);
                q.push(i);
            }
        }
        return infected.size();
    }
};
// @lc code=end

